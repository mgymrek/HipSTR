{"name":"Hipstr","tagline":"Genotype, phase and impute short tandem repeats using whole-genome sequencing data","body":"# HipSTR [![Build Status](https://travis-ci.org/tfwillems/HipSTR.svg?branch=master)](https://travis-ci.org/tfwillems/HipSTR)\r\n**H**aplotype-based **i**mputation, **p**hasing and genotyping of **STR**s\r\n\r\n#### Author: Thomas Willems <twillems@mit.edu>\r\n#### License: GNU v2\r\n## Introduction\r\nShort tandem repeats [(STRs)](http://en.wikipedia.org/wiki/Microsatellite) are highly repetitive genomic sequences comprised of repeated copies of an underlying motif. Prevalent in most organisms' genomes, STRs are of particular interest because they mutate much more rapidly than most other genomic elements. As a result, they're extremely informative for genomic identification, ancestry inference and genealogy.\r\n\r\nDespite their utility, STRs are particularly difficult to genotype. The repetitive sequence responsible for their high mutability also results in frequent alignment errors that can complicate and bias downstream analyses. In addition, PCR stutter errors often result in reads that contain additional or fewer repeat copies than the true underlying genotype. \r\n\r\n**HipSTR** was specifically developed to deal with these errors in the hopes of obtaining more robust STR genotypes. In particular, it accomplishes this by:\r\n\r\n1. Learning locus-specific PCR stutter models using an [EM algorithm] (http://en.wikipedia.org/wiki/Expectation%E2%80%93maximization_algorithm)\r\n2. Mining candidate STR alleles from population-scale sequencing data\r\n2. Utilizing phased SNP haplotypes to genotype, phase and/or impute STRs\r\n3. Employing a specialized hidden Markov model to align reads to candidate sequences while accounting for stutter\r\n\r\n\r\n\r\n## Installation\r\nHipSTR requires a standard c++ compiler, [CMake](http://www.cmake.org/download/) as well as Java version 1.7 or later.\r\nTo obtain HipSTR and all of its associated submodules, use:\r\n\r\n    % git clone --recursive https://github.com/tfwillems/HipSTR.git\r\n\r\nTo build, use Make:\r\n\r\n    % cd HipSTR\r\n    % make\r\n\r\nOn Mac, before running Make, change the line in *vcflib/smithwaterman/Makefile* from `LDFLAGS=-Wl,-s` to `LDFLAGS=-Wl`\r\n\r\n## Quick Start\r\nTo run HipSTR in its most broadly applicable mode, run it on **all samples concurrently** using the syntax:\r\n```\r\n./HipSTR --bams          run1.bam,run2.bam,run3.bam,run4.bam\r\n         --fasta         /data/\r\n         --regions       str_regions.bed\r\n         --stutter-out   stutter_models.txt\r\n         --str-vcf       str_calls.vcf.gz\r\n```\r\n* **--bam** :  a comma-separated list of [BAM](#bams) files generated by any indel-sensitive aligner (e.g. [lobSTR](http://lobstr.teamerlich.org/index.html) or [BWA-MEM](http://bio-bwa.sourceforge.net/bwa.shtml)) and sorted and indexed using samtools\r\n* **--regions** : a [BED](#str-bed) file containing the coordinates for each STR region of interest\r\n* **--fasta** : the directory containing [FASTA files] (https://en.wikipedia.org/wiki/FASTA_format) for each chromosome in the BED file. In the above usage example, if *str_regions.bed* contains chr1, chr2, and chr10, the corresponding files would be */data/chr1.fa*, */data/chr2.fa* and */data/chr10.fa*. Alternatively, you can supply the path for a single FASTA file containing all of the relevant sequences\r\n\r\nFor each region in *str_regions.bed*, **HipSTR** will:\r\n\r\n1. Learn locus-specific stutter models and output them to *stutter_models.txt*\r\n2. Use the stutter model and haplotype-based alignment algorithm to genotype each individual\r\n3. Output the resulting STR genotypes to *str_calls.vcf.gz*, a [bgzipped] (http://www.htslib.org/doc/tabix.html) [VCF](#str-vcf) file. This VCF will contain calls for each sample in any of the BAM files' read groups. \r\n\r\n## In-depth usage\r\n**HipSTR** has a variety of usage options designed to accomodate scenarios in which the sequencing data varies in terms of the number of samples and the coverage. Most scenarios will fall into one of the following categories:\r\n\r\n1. 200 or more low-coverage (~5x) samples\r\n    * Sufficient reads for stutter estimation\r\n    * Sufficient reads to detect candidate STR alleles\r\n    * [**Use de novo stutter estimation + STR calling with de novo allele generation**](#mode-1)\r\n2. 50 or more high-coverage (~30x) samples\r\n    * Sufficient reads for stutter estimation\r\n    * Sufficient reads to detect candidate STR alleles\r\n    * [**Use de novo stutter estimation + STR calling with de novo allele generation**](#mode-1)\r\n3. Handful of low-coverage  (~5x) samples\r\n    * Insufficient reads for stutter estimation\r\n    * Insufficient reads to detect candidate STR alleles\r\n    * [**Use external stutter models + STR calling with a reference panel**](#mode-3)\r\n4. Handful of high-coverage (~30x) samples\r\n    * Insufficient samples for stutter estimation\r\n    * Sufficient reads to detect candidate STR alleles\r\n    * [**Use external stutter models + STR calling with de novo allele generation**](#mode-2)\r\n\r\n<a id=\"mode-1\"></a>\r\n#### 1. De novo stutter estimation + STR calling with de novo allele generation\r\nThis mode is identical to the one suggested in the **Quick Start** section as it suits most applications. HipSTR will output the learned stutter models to *stutter_models.txt* and the STR genotypes in bgzipped VCF format to *str_calls.vcf.gz* \r\n```\r\n./HipSTR --bams             run1.bam,run2.bam,run3.bam,run4.bam\r\n         --fasta            /data/\r\n         --regions          str_regions.bed\r\n         --stutter-out      stutter_models.txt\r\n         --str-vcf          str_calls.vcf.gz\r\n```\r\n\r\n<a id=\"mode-2\"></a>\r\n#### 2. External stutter models + STR calling with de novo allele generation\r\nThe sole difference in this mode is that we no longer output stutter models using the **--stutter-out** option and instead input them from a file using the **--stutter-in** file. For more details on the stutter model file format, see [below](#stutter-file). For humans, we've provided a file containing stutter models for each STR locus under PCR or PCR-free conditions at [FILL ME IN](www.google.com)\r\n```\r\n./HipSTR --bams             run1.bam,run2.bam,run3.bam,run4.bam\r\n         --fasta            /data/\r\n         --regions          str_regions.bed\r\n         --stutter-in       ext_stutter_models.txt\r\n         --str-vcf          str_calls.vcf.gz\r\n```\r\n\r\n<a id=\"mode-3\"></a>\r\n#### 3. External stutter models + STR calling with a reference panel\r\nThis mode is very similar to mode #2, except that we provide an additional VCF file containing known STR genotypes at each locus using the **--str-vcf** option. **HipSTR** will not identify any additional candidate STR alleles in the BAMs when this option is specified, so it's best to use a VCF that contains STR genotypes for a wide range of populations and individuals. For humans, we've provided such a file based on the [1000 Genomes Project](http://www.1000genomes.org/) at [FILL ME IN](www.google.com)\r\n```\r\n./HipSTR --bams             run1.bam,run2.bam,run3.bam,run4.bam\r\n         --fasta            /data/\r\n         --regions          str_regions.bed\r\n         --stutter-in       ext_stutter_models.txt\r\n         --ref-vcf          ref_strs.vcf.gz\r\n         --str-vcf          str_calls.vcf.gz\r\n```\r\n\r\n\r\n### STR imputation\r\n\r\n## Speed\r\nHipSTR doesn't currently have multi-threaded support, but there are several options available to accelerate analyses:\r\n\r\n1. Analyze each chromosome in parallel using the **--chrom** option. For example, **--chrom chr2** will only genotype the BED regions on chr2\r\n2. Utilize the length-based genotyper instead of the sequence-based genotyper using the **--len-genotyper** flag. This will vastly accelerate analyses, but it only considers the sizes of indels in reads independently. As a result, it is incapable of determining the exact sequence of an STR and is susceptible to alignment errors\r\n3. If you have hundreds of BAM files, we recommend that you merge them into a more manageable number (10-100) using the `samtools merge` command. Large numbers of BAMs can lead to slow disk IO and poor performance\r\n\r\n## Call Filtering\r\n\r\n## Additional Usage Options\r\n| Option | Description |\r\n| :------| :-----------|\r\n| **--viz-out       <aln_viz.html.gz>**     | Output a bgzipped file containing Needleman-Wunsch alignments <br> for each locus. The resulting file can be readily visualized with [VizAln](#aln-viz) \r\n| **--haploid-chrs  <list_of_chroms>**      | Comma separated list of chromosomes to treat as haploid <br> By default, all chromosomes are treated as diploid\r\n| **--no-rmdup**                            | Don't remove PCR duplicates. By default, they'll be removed\r\n| **--snp-vcf    <phased_snps.vcf.gz>**     | Bgzipped VCF file containing phased SNP genotypes for samples <br> that are being genotyped. These SNPs will be used to physically <br> phase any STRs when a read or its mate pair overlaps a heterozygous site <br> **Always use this option if you have available phased SNP genotypes**\r\n| **--bam-samps     <list_of_read_groups>** | Comma separated list of samples in same order as BAM files. <br> Assign each read to the sample corresponding to its file. By default, <br> each read must have an RG flag and the associated sample is used instead\r\n| **--bam-lbs       <list_of_read_groups>** | Comma separated list of libraries in same order as BAM files. <br> Assign each read to the library corresponding to its file. By default, <br> each read must have an RG flag and the associated library is used instead <br> NOTE: This option is required when --bam-samps has been specified\r\n\r\nThis list is comprised of the most useful and frequently used additional options, but is not all encompassing. For a complete list of options, please type either `./HipSTR` or `./HipSTR --help`\r\n\r\n<a id=\"aln-viz\"></a>\r\n## Alignment Visualization\r\nWhen deciphering and inspecting STR calls, it's extremely useful to visualize the supporting reads. HipSTR facilitates this through the **--viz-out** option, which writes a bgzipped file containing alignments for each call that can be readily visualized using the **VizAln** command included in HipSTR main directory. If you're interested in visualizing alignments, you first need to index the file using tabix. \r\nFor example, if you ran HipSTR with the option `--viz-out aln.html.gz`, you should use the command\r\n```\r\ntabix -p bed aln.html.gz\r\n```\r\nto generate a [tabix] (http://www.htslib.org/doc/tabix.html) index for the file so that we can rapidly extract alignments for a locus of interest. This command only needs to be run once after the file has been generated. \r\n\r\nYou could then visualize the calls for sample *ERR218433* at locus *chr1 51639636* using the command\r\n```\r\n./VizAln aln.html.gz chr1 51639636 ERR218433\r\n```\r\nThis command will automatically open a rendering of the alignments in your browser and might look something like:\r\n![Read more words!](examples/example_viz.png)\r\nThe top bar represents the reference sequence and the red text indicates the name of the sample and its associated call at the locus. The remaining rows indicate the alignment for each read used in genotyping. In this particular example, 7 reads have a *4bp deletion*, 9 reads have a *8bp deletion* and 1 read has a *12bp deletion*. The solitary *12bp deletion* is likely the result of PCR stutter and HipSTR therefore genotypes this sample as *-4 | -8*\r\n\r\nIf we wanted to inspect all calls for the same locus, we could  use the command \r\n```\r\n./VizAln aln.html.gz chr1 51639636\r\n```\r\nNOTE: Because the **--viz-out** file can become fairly large if you're genotyping thousands of loci or thousands of samples, in some scenarios it may be best to rerun HipSTR using this option on the subset of loci in which you're interested.\r\n\r\n## File Formats\r\n<a id=\"bams\"></a>\r\n### BAM files\r\nHipSTR requires [BAM](https://samtools.github.io/hts-specs/SAMv1.pdf) files produced by any indel-sensitive aligner. These files must have been sorted by position using the `samtools sort` command and then indexed using `samtools index`. To associate a read with its sample of interest, HipSTR uses read group information in the BAM header lines. These *@RG* lines must contain an *ID* field, an *LB* field indicating the library and an *SM* field indicating the sample. For example, if a BAM contained the following header line \r\n> @RG     ID:RUN1 LB:ERR12345        SM:SAMPLE789\r\n\r\nan alignment with the RG tag \r\n> RG:Z:RUN1\r\n\r\nwill be associated with sample *SAMPLE789* and library *ERR12345*. In this manner, HipSTR can analyze BAMs containing more than one sample and/or more than one library and can handle BAMs in which a single sample's reads are spread across multiple files. \r\n\r\nAlternatively, if your BAM files lack *RG* information, you can use the **--bam-samps** and **-bam-lbs** flags to specify the sample and library associated with each BAM. In this setting, however, a BAM can only contain a single library and a single read group. For example, the command\r\n```\r\n./HipSTR --bams             run1.bam,run2.bam,run3.bam,run4.bam\r\n         --fasta            /data/\r\n         --regions          str_regions.bed\r\n         --stutter-out      stutter_models.txt\r\n         --str-vcf          str_calls.vcf.gz\r\n         --bam-samps        SAMPLE1,SAMPLE1,SAMPLE2,SAMPLE3\r\n         --bam-lbs          LIB1,LIB2,LIB3,LIB4\r\n```\r\nessentially tells HipSTR to associate all the reads in the first two BAMS with *SAMPLE1*, all the reads in the third file with *SAMPLE2* and all the reads in the last BAM with *SAMPLE3*.\r\n\r\n<a id=\"str-bed\"></a>\r\n### STR region BED file\r\nThe BED file containing each STR region of interest is a tab-delimited file comprised of 5 required columns and one optional column: \r\n\r\n1. The name of the chromosome on which the STR is located\r\n2. The start position of the STR on its chromosome\r\n3. The end position of the STR on its chromosome\r\n4. The motif length (i.e. the number of bases in the repeat unit)\r\n5. The number of copies of the repeat unit in the reference allele\r\n\r\nThe 6th column is optional and contains the name of the STR locus, which will be written to the ID column in the VCF. \r\nBelow is an example file which contains 5 STR loci \r\n\r\n**NOTE: The table header is for descriptive purposes. The BED file should not have a header**\r\n\r\nCHROM | START | END | MOTIF_LEN | NUM_COPIES | NAME\r\n---- | ---- | ---- | --- | --- | ---\r\nchr1    | 13784267    | 13784306    | 4 | 10 | GATA27E01\r\nchr1    | 18789523    | 18789555    | 3 | 11 | ATA008\r\nchr2    | 32079410    | 32079469    | 4 | 15 | AGAT117\r\nchr17    | 38994441    | 38994492    | 4 | 12 | GATA25A04\r\nchr17    | 5529940    | 55299992    | 4 | 13 | AAT245\r\n\r\nFor humans, we've provided a *BED* file containing STR loci for hg19 at [FILL ME IN](www.google.com)\r\n\r\nFor other model organisms, we recommend that you \r\n\r\n1. Use [Tandem Repeats Finder](https://tandem.bu.edu/trf/trf.html) or other tools to scan the reference genome for STRs\r\n2. Reformat the resulting output to conform with the format outlined above\r\n\r\n<a id=\"str-vcf\"></a>\r\n### VCF file\r\nFor more information on the VCF file format, please see the [VCF spec](http://samtools.github.io/hts-specs/VCFv4.2.pdf). For filtering and parsing VCFs, we recommend the fantastic python package [PyVCF](http://pyvcf.readthedocs.org/en/latest/)\r\n\r\n#### INFO fields\r\n*INFO* fields contains statistics about each genotyped locus in the VCF. The INFO fields reported by HipSTR primarily describe the learned/supplied stutter model for the locus and its reference coordinates and sequence characteristics.\r\n\r\nFIELD | DESCRIPTION\r\n----- | -----------\r\nINFRAME_PGEOM  | Parameter for in-frame geometric step size distribution\r\nINFRAME_UP     | Probability that stutter causes an in-frame increase in obs. STR size\r\nINFRAME_DOWN   | Probability that stutter causes an in-frame decrease in obs. STR size\r\nOUTFRAME_PGEOM | Parameter for out-of-frame geometric step size distribution\r\nOUTFRAME_UP    | Probability that stutter causes an out-of-frame increase in obs. STR size\r\nOUTFRAME_DOWN  | Probability that stutter causes an out-of-frame decrease in obs. STR size\r\nBPDIFFS        | Base pair difference of each alternate allele from the reference allele\r\nSTART          | Inclusive start coodinate for the repetitive portion of the reference allele\r\nEND            | Inclusive end coordinate for the repetitive portion of the reference allele\r\nPERIOD         | Length of STR motif\r\nREFAC          | Reference allele count\r\nAC             | Alternate allele counts\r\nNSKIP          | Number of samples not genotyped due to various issues\r\nNFILT          | Number of samples that were originally genotyped but have since been filtered\r\nDP             | Total number of reads used to genotype all samples\r\nDSNP           | Total number of reads with SNP information\r\nDFILT          | Total number of reads filtered due to various reasons\r\nDSTUTTER       | Total number of reads with a stutter indel in the STR region\r\nDFLANKINDEL    | Total number of reads with an indel in the regions flanking the STR\r\n\r\n#### FORMAT fields\r\n*FORMAT* fields contain information about the genotype for each sample at the locus. In addition to the most probable phased genotype (*GT*), HipSTR reports information about the posterior likelihood of this genotype (*PQ*) and its unphased analog (*Q*). HipSTR also reports the expected base pair difference from the reference for the genotype by marginalizing over all genotype probabilities (*BPDOSE*), a value that may be useful in association studies. \r\n\r\nFIELD     | DESCRIPTION\r\n--------- | -----------\r\nGT        | Genotype\r\nGB        | Base pair differences of genotype from reference\r\nQ         | Posterior probability of unphased genotype\r\nPQ        | Posterior probability of phased genotype\r\nDP        | Number of valid reads used for sample's genotype\r\nDSNP      | Number of reads with SNP phasing information\r\nPDP       | Fractional reads supporting each haploid genotype\r\nBQ        | Bootstrapped quality score\r\nGLDIFF    | Difference in likelihood between the reported and next best genotypes\r\nDSNP      | Total number of reads with SNP information\r\nDFILT     | Number of reads filtered due to various issues\r\nDSTUTTER  | Number of reads with a stutter indel in the STR region\r\nDFLANKINDEL | Number of reads with an indel in the regions flanking the STR\r\nBPDOSE    | Posterior mean base pair difference from reference\r\nALLREADS  | Base pair difference observed in each read's Needleman-Wunsch alignment\r\nMALLREADS | Maximum likelihood bp diff in each read based on haplotype alignments\r\nPALLREADS | Expected base pair diff in each read based on haplotype alignment probs\r\nGL        | log-10 genotype likelihoods\r\nPL        | Phred-scaled genotype likelihoods\r\n\r\n\r\n<a id=\"stutter-file\"></a>\r\n### Stutter model\r\nTo model PCR stutter artifacts, we assume that there are three types of stutter artifacts:\r\n\r\n1. **In-frame changes**: Change the size of the STR in the read by multiples of the repeat unit. For instance, if the repeat motif is AGAT, in-frame changes could lead to differences of -8, -4, 4, 8, and so on. \r\n2. **Out-of-frame changes**: Change the size of the STR by non-multiples of the repeat unit. For instance, if the repeat motif is AGAT, out-of-frame changes could lead to differences of -3, -2, -1, 1, 2, 3 and so on. \r\n3. **No stutter change**: The size of the STR in the read is the same as the size of the underlying STR. \r\n\r\n\r\nStutter model files contain the information necessary to model each of these artifacts in a **tab-delimited BED-like** format with exactly 9 columns. An example of such a file is as follows:\r\n\r\nCHROM  | START       | END      | IGEOM | IDOWN | IUP   | OGEOM | ODOWN | OUP\r\n-----  | ----------- | -------- | ----  | ----  | ---   | ----  | ---   | ---\r\nchr1   | 13784267    | 13784306 | 0.95  | 0.05  | 0.01  | 0.9   | 0.01  | 0.001\r\nchr1   | 18789523    | 18789555 | 0.8   | 0.01  | 0.05  | 0.9   | 0.001 | 0.001\r\nchr2   | 32079410    | 32079469 | 0.9   | 0.01  | 0.01  | 0.9   | 0.001 | 0.001\r\nchr17  | 38994441    | 38994492 | 0.9   | 0.001 | 0.001 | 0.9   | 0.001 | 0.001 \r\nchr17  | 5529940     | 55299992 | 0.95  | 0.01  | 0.01  | 0.9   | 0.001 | 0.001\r\n\r\n**NOTE: The table header is for descriptive purposes. The stutter file should not have a header**\r\n\r\n\r\nEach of the stutter parameters is defined as follows:\r\n\r\n| VARIABLE | DESCRIPTION\r\n| -------- | --------\r\n| IDOWN    | Probability that in-frame changes decrease the size of the observed STR allele\r\n| IUP      |  Probability that in-frame changes increase the size of the observed STR allele\r\n| ODOWN    | Probability that out-of-frame changes decrease the size of the observed STR allele\r\n| OUP      |  Probability that out-of-frame changes increase the size of the observed STR allele\r\n| IGEOM    | Parameter governing geometric step size distribution for in-frame changes\r\n| OGEOM    | Paramter  governing geometric step size distribution for out-of-frame changes\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}